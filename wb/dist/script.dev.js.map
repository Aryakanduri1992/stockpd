{"version":3,"sources":["script.js"],"names":["chartInstance","fetchStockData","symbol","apiKey","url","fetch","response","status","Error","json","data","console","log","error","predictStockPricesWithChatGPT","historicalData","apiUrl","closingPrices","Object","values","map","day","parseFloat","reverse","prompt","join","method","headers","body","JSON","stringify","model","messages","role","content","max_tokens","temperature","choices","length","predictionText","message","trim","predictions","split","price","predictStockPrices","loadingElement","document","getElementById","errorElement","resultElement","tableBody","querySelector","viewToggleElement","chartViewElement","tableViewElement","backButtonContainer","style","display","innerHTML","stockData","displayChart","displayTable","textContent","dates","keys","futureDates","Array","fill","_","i","ctx","getContext","destroy","Chart","type","labels","datasets","label","borderColor","borderWidth","options","scales","x","title","text","y","forEach","date","index","row","createElement","dateCell","priceCell","appendChild","prediction","toggleView","toggleViewButton","resetForm","stockSymbolInput","value","addEventListener"],"mappings":"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","sourcesContent":["let chartInstance = null;  // Global variable to keep track of the Chart.js instance\n\n// Fetch historical stock data from Alpha Vantage API with rate limit handling\nasync function fetchStockData(symbol) {\n    const apiKey = 'W69SKYDC7J7YHF46';  // Replace with your Alpha Vantage API key\n    const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${apiKey}`;\n    \n    try {\n        const response = await fetch(url);\n        \n        // Check if response status indicates a rate limit error\n        if (response.status === 429) {\n            throw new Error('Rate limit exceeded. Please wait and try again.');\n        }\n        \n        const data = await response.json();\n        console.log(\"Fetched stock data:\", data);  // Debugging output\n        \n        if (data['Time Series (Daily)']) {\n            return data['Time Series (Daily)'];\n        } else {\n            throw new Error(data['Note'] || 'Failed to retrieve data');\n        }\n    } catch (error) {\n        console.error('Error fetching stock data:', error);\n        throw error;\n    }\n}\n\n// Use ChatGPT to predict future stock prices\nasync function predictStockPricesWithChatGPT(symbol, historicalData) {\n    const apiKey = 'sk-proj-5juprBo9dw9wdpOq5opJT3BlbkFJA2aOYGK54Ia0Udb3rSXM';  // Replace with your OpenAI API key\n    const apiUrl = 'https://api.openai.com/v1/chat/completions';  // OpenAI Chat API URL\n\n    // Format the historical data as input for ChatGPT\n    const closingPrices = Object.values(historicalData).map(day => parseFloat(day['4. close'])).reverse();\n    const prompt = `Given the following closing prices for stock ${symbol}: ${closingPrices.join(', ')}, predict the next 7 days of closing prices. Please provide the prices as a comma-separated list.`;\n\n    console.log(\"Prompt for GPT-3:\", prompt);\n\n    try {\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [{ role: \"user\", content: prompt }],\n                max_tokens: 100,  // Adjust as needed\n                temperature: 0.5\n            })\n        });\n\n        const data = await response.json();\n        console.log(\"GPT-3 response:\", data);  // Debugging output\n\n        if (data.choices && data.choices.length > 0) {\n            const predictionText = data.choices[0].message.content.trim();\n            const predictions = predictionText.split(',').map(price => parseFloat(price.trim()));\n            console.log(\"Predictions:\", predictions);\n            return predictions;\n        } else {\n            throw new Error(\"Invalid GPT-3 response\");\n        }\n    } catch (error) {\n        console.error('Error predicting stock prices with ChatGPT:', error);\n        throw error;\n    }\n}\n\n// Main function to handle the prediction\nasync function predictStockPrices(symbol) {\n    const loadingElement = document.getElementById('loading');\n    const errorElement = document.getElementById('error');\n    const resultElement = document.getElementById('result');\n    const tableBody = document.querySelector('#priceTable tbody');\n    const viewToggleElement = document.getElementById('viewToggle');\n    const chartViewElement = document.getElementById('chartView');\n    const tableViewElement = document.getElementById('tableView');\n    const backButtonContainer = document.getElementById('backButtonContainer');\n\n    loadingElement.style.display = 'block';\n    errorElement.style.display = 'none';\n    tableBody.innerHTML = '';\n    chartViewElement.style.display = 'none';\n    tableViewElement.style.display = 'none';\n    viewToggleElement.style.display = 'none';\n    backButtonContainer.style.display = 'none';\n\n    try {\n        const stockData = await fetchStockData(symbol);\n        if (stockData) {\n            const predictions = await predictStockPricesWithChatGPT(symbol, stockData);\n            if (predictions) {\n                displayChart(stockData, predictions);\n                displayTable(stockData, predictions);\n                chartViewElement.style.display = 'block';\n                viewToggleElement.style.display = 'block';\n                backButtonContainer.style.display = 'block';\n            } else {\n                errorElement.textContent = 'Failed to get predictions';\n                errorElement.style.display = 'block';\n            }\n        } else {\n            errorElement.textContent = 'Failed to fetch stock data';\n            errorElement.style.display = 'block';\n        }\n    } catch (error) {\n        errorElement.textContent = error.message;\n        errorElement.style.display = 'block';\n    } finally {\n        loadingElement.style.display = 'none';\n    }\n}\n\n// Display predictions on the chart\nfunction displayChart(stockData, predictions) {\n    const closingPrices = Object.values(stockData).map(day => parseFloat(day['4. close'])).reverse();\n    const dates = Object.keys(stockData).reverse();\n\n    const futureDates = Array(7).fill('').map((_, i) => `Day ${i + 1}`);\n    \n    const ctx = document.getElementById('myChart').getContext('2d');\n    \n    // Destroy the previous chart instance if it exists\n    if (chartInstance) {\n        chartInstance.destroy();\n    }\n\n    chartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [...dates, ...futureDates],\n            datasets: [\n                {\n                    label: 'Historical Prices',\n                    data: closingPrices,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                    fill: false\n                },\n                {\n                    label: 'Predicted Prices',\n                    data: [...Array(closingPrices.length).fill(null), ...predictions],\n                    borderColor: 'rgba(255, 99, 132, 1)',\n                    borderWidth: 1,\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Date'\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Price'\n                    }\n                }\n            }\n        }\n    });\n}\n\n// Display historical and predicted prices in a table\nfunction displayTable(stockData, predictions) {\n    const closingPrices = Object.values(stockData).map(day => parseFloat(day['4. close'])).reverse();\n    const dates = Object.keys(stockData).reverse();\n\n    const tableBody = document.querySelector('#priceTable tbody');\n    const tableViewElement = document.getElementById('tableView');\n\n    dates.forEach((date, index) => {\n        const row = document.createElement('tr');\n        const dateCell = document.createElement('td');\n        const priceCell = document.createElement('td');\n\n        dateCell.textContent = date;\n        priceCell.textContent = closingPrices[index];\n\n        row.appendChild(dateCell);\n        row.appendChild(priceCell);\n        tableBody.appendChild(row);\n    });\n\n    predictions.forEach((prediction, index) => {\n        const row = document.createElement('tr');\n        const dateCell = document.createElement('td');\n        const priceCell = document.createElement('td');\n\n        dateCell.textContent = `Day ${index + 1}`;\n        priceCell.textContent = prediction;\n\n        row.appendChild(dateCell);\n        row.appendChild(priceCell);\n        tableBody.appendChild(row);\n    });\n\n    tableViewElement.style.display = 'none';\n}\n\n// Toggle between chart view and table view\nfunction toggleView() {\n    const chartViewElement = document.getElementById('chartView');\n    const tableViewElement = document.getElementById('tableView');\n    const toggleViewButton = document.getElementById('toggleViewButton');\n\n    if (chartViewElement.style.display === 'none') {\n        chartViewElement.style.display = 'block';\n        tableViewElement.style.display = 'none';\n        toggleViewButton.textContent = 'Switch to Table View';\n    } else {\n        chartViewElement.style.display = 'none';\n        tableViewElement.style.display = 'block';\n        toggleViewButton.textContent = 'Switch to Chart View';\n    }\n}\n\n// Reset the form to allow new stock symbol input\nfunction resetForm() {\n    const stockSymbolInput = document.getElementById('stockSymbol');\n    const chartViewElement = document.getElementById('chartView');\n    const tableViewElement = document.getElementById('tableView');\n    const viewToggleElement = document.getElementById('viewToggle');\n    const backButtonContainer = document.getElementById('backButtonContainer');\n    const tableBody = document.querySelector('#priceTable tbody');\n\n    stockSymbolInput.value = '';\n    chartViewElement.style.display = 'none';\n    tableViewElement.style.display = 'none';\n    viewToggleElement.style.display = 'none';\n    backButtonContainer.style.display = 'none';\n    tableBody.innerHTML = '';\n    \n    // Destroy the chart instance if it exists\n    if (chartInstance) {\n        chartInstance.destroy();\n        chartInstance = null;\n    }\n}\n\n// Event listeners\ndocument.getElementById('predictButton').addEventListener('click', () => {\n    const symbol = document.getElementById('stockSymbol').value;\n    predictStockPrices(symbol);\n});\n\ndocument.getElementById('toggleViewButton').addEventListener('click', toggleView);\n\ndocument.getElementById('backButton').addEventListener('click', resetForm);\n"],"file":"script.dev.js"}