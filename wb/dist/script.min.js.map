{"version":3,"sources":["script.js"],"names":["chartInstance","fetchStockData","symbol","url","response","data","regeneratorRuntime","async","_context","prev","next","concat","awrap","fetch","sent","status","Error","json","console","log","abrupt","t0","error","stop","predictStockPricesWithChatGPT","historicalData","closingPrices","prompt","predictionText","predictions","_context2","Object","values","map","day","parseFloat","reverse","join","headers","Authorization","body","JSON","stringify","model","messages","role","max_tokens","temperature","choices","length","message","content","trim","split","price","loadingElement","errorElement","tableBody","viewToggleElement","chartViewElement","tableViewElement","backButtonContainer","stockData","_context3","document","getElementById","querySelector","apiKey","apiUrl","style","display","innerHTML","method","displayChart","displayTable","textContent","finish","dates","keys","futureDates","Array","fill","_","i","destroy","ctx","type","labels","_toConsumableArray","datasets","label","borderColor","borderWidth","options","predictStockPrices","scales","x","title","text","forEach","date","index","row","createElement","dateCell","priceCell","appendChild","prediction","toggleView","toggleViewButton","resetForm","stockSymbolInput","value","addEventListener"],"mappings":"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","file":"script.min.js","sourcesContent":["let chartInstance = null;  // Global variable to keep track of the Chart.js instance\n\n// Fetch historical stock data from Alpha Vantage API with rate limit handling\nasync function fetchStockData(symbol) {\n    const apiKey = 'W69SKYDC7J7YHF46';  // Replace with your Alpha Vantage API key\n    const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${apiKey}`;\n    \n    try {\n        const response = await fetch(url);\n        \n        // Check if response status indicates a rate limit error\n        if (response.status === 429) {\n            throw new Error('Rate limit exceeded. Please wait and try again.');\n        }\n        \n        const data = await response.json();\n        console.log(\"Fetched stock data:\", data);  // Debugging output\n        \n        if (data['Time Series (Daily)']) {\n            return data['Time Series (Daily)'];\n        } else {\n            throw new Error(data['Note'] || 'Failed to retrieve data');\n        }\n    } catch (error) {\n        console.error('Error fetching stock data:', error);\n        throw error;\n    }\n}\n\n// Use ChatGPT to predict future stock prices\nasync function predictStockPricesWithChatGPT(symbol, historicalData) {\n    const apiKey = 'sk-proj-5juprBo9dw9wdpOq5opJT3BlbkFJA2aOYGK54Ia0Udb3rSXM';  // Replace with your OpenAI API key\n    const apiUrl = 'https://api.openai.com/v1/chat/completions';  // OpenAI Chat API URL\n\n    // Format the historical data as input for ChatGPT\n    const closingPrices = Object.values(historicalData).map(day => parseFloat(day['4. close'])).reverse();\n    const prompt = `Given the following closing prices for stock ${symbol}: ${closingPrices.join(', ')}, predict the next 7 days of closing prices. Please provide the prices as a comma-separated list.`;\n\n    console.log(\"Prompt for GPT-3:\", prompt);\n\n    try {\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [{ role: \"user\", content: prompt }],\n                max_tokens: 100,  // Adjust as needed\n                temperature: 0.5\n            })\n        });\n\n        const data = await response.json();\n        console.log(\"GPT-3 response:\", data);  // Debugging output\n\n        if (data.choices && data.choices.length > 0) {\n            const predictionText = data.choices[0].message.content.trim();\n            const predictions = predictionText.split(',').map(price => parseFloat(price.trim()));\n            console.log(\"Predictions:\", predictions);\n            return predictions;\n        } else {\n            throw new Error(\"Invalid GPT-3 response\");\n        }\n    } catch (error) {\n        console.error('Error predicting stock prices with ChatGPT:', error);\n        throw error;\n    }\n}\n\n// Main function to handle the prediction\nasync function predictStockPrices(symbol) {\n    const loadingElement = document.getElementById('loading');\n    const errorElement = document.getElementById('error');\n    const resultElement = document.getElementById('result');\n    const tableBody = document.querySelector('#priceTable tbody');\n    const viewToggleElement = document.getElementById('viewToggle');\n    const chartViewElement = document.getElementById('chartView');\n    const tableViewElement = document.getElementById('tableView');\n    const backButtonContainer = document.getElementById('backButtonContainer');\n\n    loadingElement.style.display = 'block';\n    errorElement.style.display = 'none';\n    tableBody.innerHTML = '';\n    chartViewElement.style.display = 'none';\n    tableViewElement.style.display = 'none';\n    viewToggleElement.style.display = 'none';\n    backButtonContainer.style.display = 'none';\n\n    try {\n        const stockData = await fetchStockData(symbol);\n        if (stockData) {\n            const predictions = await predictStockPricesWithChatGPT(symbol, stockData);\n            if (predictions) {\n                displayChart(stockData, predictions);\n                displayTable(stockData, predictions);\n                chartViewElement.style.display = 'block';\n                viewToggleElement.style.display = 'block';\n                backButtonContainer.style.display = 'block';\n            } else {\n                errorElement.textContent = 'Failed to get predictions';\n                errorElement.style.display = 'block';\n            }\n        } else {\n            errorElement.textContent = 'Failed to fetch stock data';\n            errorElement.style.display = 'block';\n        }\n    } catch (error) {\n        errorElement.textContent = error.message;\n        errorElement.style.display = 'block';\n    } finally {\n        loadingElement.style.display = 'none';\n    }\n}\n\n// Display predictions on the chart\nfunction displayChart(stockData, predictions) {\n    const closingPrices = Object.values(stockData).map(day => parseFloat(day['4. close'])).reverse();\n    const dates = Object.keys(stockData).reverse();\n\n    const futureDates = Array(7).fill('').map((_, i) => `Day ${i + 1}`);\n    \n    const ctx = document.getElementById('myChart').getContext('2d');\n    \n    // Destroy the previous chart instance if it exists\n    if (chartInstance) {\n        chartInstance.destroy();\n    }\n\n    chartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [...dates, ...futureDates],\n            datasets: [\n                {\n                    label: 'Historical Prices',\n                    data: closingPrices,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                    fill: false\n                },\n                {\n                    label: 'Predicted Prices',\n                    data: [...Array(closingPrices.length).fill(null), ...predictions],\n                    borderColor: 'rgba(255, 99, 132, 1)',\n                    borderWidth: 1,\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Date'\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Price'\n                    }\n                }\n            }\n        }\n    });\n}\n\n// Display historical and predicted prices in a table\nfunction displayTable(stockData, predictions) {\n    const closingPrices = Object.values(stockData).map(day => parseFloat(day['4. close'])).reverse();\n    const dates = Object.keys(stockData).reverse();\n\n    const tableBody = document.querySelector('#priceTable tbody');\n    const tableViewElement = document.getElementById('tableView');\n\n    dates.forEach((date, index) => {\n        const row = document.createElement('tr');\n        const dateCell = document.createElement('td');\n        const priceCell = document.createElement('td');\n\n        dateCell.textContent = date;\n        priceCell.textContent = closingPrices[index];\n\n        row.appendChild(dateCell);\n        row.appendChild(priceCell);\n        tableBody.appendChild(row);\n    });\n\n    predictions.forEach((prediction, index) => {\n        const row = document.createElement('tr');\n        const dateCell = document.createElement('td');\n        const priceCell = document.createElement('td');\n\n        dateCell.textContent = `Day ${index + 1}`;\n        priceCell.textContent = prediction;\n\n        row.appendChild(dateCell);\n        row.appendChild(priceCell);\n        tableBody.appendChild(row);\n    });\n\n    tableViewElement.style.display = 'none';\n}\n\n// Toggle between chart view and table view\nfunction toggleView() {\n    const chartViewElement = document.getElementById('chartView');\n    const tableViewElement = document.getElementById('tableView');\n    const toggleViewButton = document.getElementById('toggleViewButton');\n\n    if (chartViewElement.style.display === 'none') {\n        chartViewElement.style.display = 'block';\n        tableViewElement.style.display = 'none';\n        toggleViewButton.textContent = 'Switch to Table View';\n    } else {\n        chartViewElement.style.display = 'none';\n        tableViewElement.style.display = 'block';\n        toggleViewButton.textContent = 'Switch to Chart View';\n    }\n}\n\n// Reset the form to allow new stock symbol input\nfunction resetForm() {\n    const stockSymbolInput = document.getElementById('stockSymbol');\n    const chartViewElement = document.getElementById('chartView');\n    const tableViewElement = document.getElementById('tableView');\n    const viewToggleElement = document.getElementById('viewToggle');\n    const backButtonContainer = document.getElementById('backButtonContainer');\n    const tableBody = document.querySelector('#priceTable tbody');\n\n    stockSymbolInput.value = '';\n    chartViewElement.style.display = 'none';\n    tableViewElement.style.display = 'none';\n    viewToggleElement.style.display = 'none';\n    backButtonContainer.style.display = 'none';\n    tableBody.innerHTML = '';\n    \n    // Destroy the chart instance if it exists\n    if (chartInstance) {\n        chartInstance.destroy();\n        chartInstance = null;\n    }\n}\n\n// Event listeners\ndocument.getElementById('predictButton').addEventListener('click', () => {\n    const symbol = document.getElementById('stockSymbol').value;\n    predictStockPrices(symbol);\n});\n\ndocument.getElementById('toggleViewButton').addEventListener('click', toggleView);\n\ndocument.getElementById('backButton').addEventListener('click', resetForm);\n"]}